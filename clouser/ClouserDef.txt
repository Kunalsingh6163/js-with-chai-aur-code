(1)-->What is clouser?
A closure is the combination of a function bundled together (enclosed) with references to its surrounding state
(the lexical environment). In other words, a closure gives a function access to its outer scope. 
 In JavaScript, closures are created every time a function is created, at function creation time.

to understand see examples.

(2)-->Describe closure in JavaScript. Can you give an example?
In JavaScript, closures enable a function to access its outer scope, retaining this access even after the parent 
function has finished executing. This mechanism provides a powerful tool for data encapsulation and privacy.

Core Concept
When a function is defined within another function, it maintains a reference to the variables from the outer function, 
even after the outer function has completed execution and its local variables are typically no longer accessible.

Key Components
Outer Function (Parent function): It contains the inner functions or closures.
Inner Function (Closure): Defined within the parent function, it references variables from the outer function.
Lexical Environment: The context where the inner function is defined, encapsulating the scope it has access to.
Example: Password Generator
Consider a simple scenario of a function in charge of generating a secret password:

The outer function, generatePassword, defines a local variable, password and returns an inner function getPassword.
The inner function, getPassword, has exclusive access to the password variable even after generatePassword has executed.
Here is the JavaScript code:

function generatePassword() {
  let password = '';
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const passwordLength = 8;
  for(let i = 0; i < passwordLength; i++) {
    password += characters.charAt(Math.floor(Math.random() * characters.length));
  }

  return function getPassword() {
      return password;
  };
}

const getPassword = generatePassword();

console.log(getPassword()); // Outputs the generated password.
In this example, getPassword still has access to the password variable after the generatePassword function has completed, 
thanks to the closure mechanism.

Application
Data Privacy: JavaScript design patterns like the Module and Revealing Module Patterns use closures to keep data private.

Timeouts and Event Handlers: Closures help preserve the surrounding context in asynchronous operations such as setTimeout 
and event handlers.

Pitfalls to Avoid
Memory Leakage: If not used carefully, closures can cause memory leaks, as the outer function's variables continue to 
live in memory because of the closure link.
Stale Data: Be mindful of shared variables that might change after a closure has been defined, leading to unexpected behavior.
Browser Compatibility
The concept of closures is a fundamental aspect of the JavaScript language and is supported by all modern browsers and environments.
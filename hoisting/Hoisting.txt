Explain the Concept of Hoisting in JavaScript?
Answer: - Hoisting is a JavaScript mechanism that involves moving variable and function declarations to the top of their containing scope during the compile phase. However, the assignments to these variables or the definitions of functions remain in place.
For instance, even though the call to myFunction appears before its definition, hoisting ensures that it doesn't cause an error.
Here's a Code Example:
console.log(myVar); // Undefined
var myVar = 5;
console.log(myVar); // 5

// The above code is equivalent to the following during the compile phase:
// var myVar;
// console.log(myVar);
// myVar = 5;

console.log(sayHello()); // "Hello, World!"
function sayHello() {
    return "Hello, World!";
}

// The above code is equivalent to the following during the compile phase:
// function sayHello() {
//     return "Hello, World!";
// }
// console.log(sayHello());

5.1: - Why hoisting Matters?
 Understanding hoisting can help you prevent certain unexpected behaviors in your code. For example, it can shed light on unexpected "undefined" values that might appear even after a variable is declared and initialized.
Global Scope and Hoisting
In the global scope, variables declared with var and functions are always hoisted to the top. For example:
// During the compile phase, the following global declarations are hoisted:
// var globalVar;
// function globalFunction() {}

console.log(globalVar); // Undefined
console.log(globalFunction()); // "Hello, Global!"
var globalVar = "I am global Var!";
function globalFunction() {
    return "Hello, Global!";
}
 5.2: - Local Scope and Hoisting
Variables and functions declared in local scopes within functions are also hoisted to the top of their scope.
Here's a Code Example:
function hoistingInLocalScope() {
    // These local declarations are hoisted during the compile phase:
    // var localVar;
    // function localFunction() {}

    console.log(localVar); // Undefined
    localVar = "I am a local var!";
    console.log(localFunction()); // "Hello, Local!"

    var localVar;
    function localFunction() {
        return "Hello, Local!";
    }
}

Best Practices: - To write clean, readable code, it's important to:

•	Declare variables at the top of your scripts or functions to avoid hoisting-related pitfalls.
•	Initialize variables before use, regardless of hoisting, to ensure predictable behaviour.
5.3: - ES6 and Hoisting
With the introduction of let and const in ES6, JavaScript's behavior has adapted. Variables declared using let and const are still hoisted, but unlike var, they are not initialized.
Here's an Example:
console.log(myLetVar); // ReferenceError: Cannot access 'myLetVar' before initialization
let myLetVar = 5;

5.4: - Constants and Hoisting
const and let behave similarly when hoisted, but their difference lies in the fact that const must be assigned a value at the time of declaration, whereas let does not require an initial value.
Here's an Example:
console.log(myConstVar); // ReferenceError: Cannot access 'myConstVar' before initialization
const myConstVar = 10;

console.log(myLetVar); // Undefined
let myLetVar = 5;

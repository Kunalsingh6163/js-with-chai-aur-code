What is a higher-order function in JavaScript?

A higher-order function in JavaScript is a function that can take other functions as arguments or can return functions. 
This feature enables functional programming paradigms such as map, reduce, and filter. Higher-order functions offer 
versatility and modularity, fostering streamlined, efficient code.

Key Characteristics
First-class functions: Functions in JavaScript are considered first-class, meaning they are a legitimate data type and can 
be treated like any other value, including being assigned to variables, stored in data structures, or returned from other functions.

Closure support: Due to closures, a higher-order function can transport not just the enclosed data within the function 
definition, but also the lexical environment in which that data resides.

Dynamic code: Because JavaScript allows functions to be dynamically constructed and named, they can be dynamically 
passed to higher-order functions.

Practical Applications
Callback Execution: Functions like setTimeout and addEventListener take a function as an argument and are thus higher-order.

Event Handling: Many event-driven systems leverage higher-order functions for tasks such as event subscription and emission.

Iterative Operations: The map, filter, and reduce functions in JavaScript operate on arrays and require functions to be passed, 
making them higher-order.

Code Abstraction: Higher-order functions enable the encapsulation of repetitive tasks, promoting cleaner, more readable code.

Code Example: Higher-order Functions
Here is the JavaScript code:

// Simple higher-order function
function multiplier(factor) {
  return function(num) {
    return num * factor;
  };
}

// Invoke a higher-order function
const twice = multiplier(2);
console.log(twice(5));  // Output: 10

// Functional programming with higher-order functions
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(multiplier(2));  // [2, 4, 6, 8, 10]
const tripled = numbers.map(multiplier(3));  // [3, 6, 9, 12, 15]